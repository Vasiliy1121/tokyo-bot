from aiogram import Router, types, F, Bot
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from states import TripStates
from openai_helper import generate_itinerary, edit_day
from utils import itinerary_keyboard, edit_day_keyboard
from utils import split_message
from db import db, User, Route
import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from pdf_export import itinerary_to_pdf
import os
from fastapi import BackgroundTasks

router = Router()
user_itineraries = {}  # —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# üö© –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    await state.set_state(TripStates.waiting_days)
    await message.answer("üóìÔ∏è –ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –ø–æ–µ–∑–¥–∫—É –≤ –¢–æ–∫–∏–æ?")

# –°–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
@router.message(TripStates.waiting_days)
async def get_days(message: types.Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ FSM –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ —Å–æ—Å—Ç–∞–≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤.
    """
    await state.update_data(days=message.text)
    await state.set_state(TripStates.waiting_travelers)
    await message.answer("üë• –ö—Ç–æ –µ–¥–µ—Ç —Å —Ç–æ–±–æ–π? (–æ–¥–∏–Ω, –ø–∞—Ä–∞, —Å–µ–º—å—è —Å –¥–µ—Ç—å–º–∏, –¥—Ä—É–∑—å—è‚Ä¶)")


# –°–±–æ—Ä —Å–æ—Å—Ç–∞–≤–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤
@router.message(TripStates.waiting_travelers)
async def get_travelers(message: types.Message, state: FSMContext):
    await state.update_data(travelers=message.text)
    await state.set_state(TripStates.waiting_interests)
    await message.answer("üéå –ö–∞–∫–∏–µ —Ç–≤–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤ –¢–æ–∫–∏–æ?")

# –°–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
@router.message(TripStates.waiting_interests)
async def get_interests(message: types.Message, state: FSMContext):
    await state.update_data(interests=message.text)
    await state.set_state(TripStates.waiting_pace)
    await message.answer("üö∂‚Äç‚ôÇÔ∏è –ö–∞–∫–æ–π —Ç–µ–º–ø —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è? (—Å–ø–æ–∫–æ–π–Ω—ã–π, —É–º–µ—Ä–µ–Ω–Ω—ã–π –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π)")

# –°–±–æ—Ä —Ç–µ–º–ø–∞
@router.message(TripStates.waiting_pace)
async def get_pace(message: types.Message, state: FSMContext):
    await state.update_data(pace=message.text)
    await state.set_state(TripStates.waiting_budget)
    await message.answer("üí¥ –ö–∞–∫–æ–π —É —Ç–µ–±—è –±—é–¥–∂–µ—Ç –Ω–∞ –¥–µ–Ω—å? (—ç–∫–æ–Ω–æ–º–Ω—ã–π, —Å—Ä–µ–¥–Ω–∏–π, –≤—ã—Å–æ–∫–∏–π)")

# –°–±–æ—Ä –±—é–¥–∂–µ—Ç–∞
@router.message(TripStates.waiting_budget)
async def get_budget(message: types.Message, state: FSMContext):
    await state.update_data(budget=message.text)
    await state.set_state(TripStates.waiting_food)
    await message.answer("üç± –ö–∞–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –µ–¥–µ? (—è–ø–æ–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è, –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ, –∞–ª–ª–µ—Ä–≥–∏–∏, –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã)")

# –°–±–æ—Ä –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ –µ–¥–µ
@router.message(TripStates.waiting_food)
async def get_food(message: types.Message, state: FSMContext):
    await state.update_data(food=message.text)
    await state.set_state(TripStates.waiting_special_requests)
    await message.answer("üìå –ï—Å—Ç—å –ª–∏ –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è?")

# –°–±–æ—Ä –æ—Å–æ–±—ã—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
@router.message(TripStates.waiting_special_requests)
async def get_special_requests(message: types.Message, state: FSMContext, background_tasks: BackgroundTasks):
    await state.update_data(special_requests=message.text)
    data = await state.get_data()
    await state.clear()

    await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ 1‚Äì2 –º–∏–Ω—É—Ç—ã ‚Äî —è –≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–≤–æ–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –ø–æ –¢–æ–∫–∏–æ‚Ä¶")

    background_tasks.add_task(generate_and_send_itinerary, bot, message.from_user.id, data)

async def generate_and_send_itinerary(bot: Bot, user_id: int, data: dict):
    try:
        itinerary = await generate_itinerary(data)

        itinerary_entry = {
            'name': f"–ú–∞—Ä—à—Ä—É—Ç –æ—Ç {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}",
            'itinerary': itinerary
        }

        with db:
            user, created = User.get_or_create(user_id=user_id)
            Route.create(
                user=user,
                name=itinerary_entry['name'],
                itinerary=itinerary,
                created_at=datetime.datetime.now()
            )

        messages = split_message(itinerary)

        for part in messages[:-1]:
            await bot.send_message(user_id, part, parse_mode="Markdown")

        await bot.send_message(user_id, messages[-1], reply_markup=itinerary_keyboard(), parse_mode="Markdown")

    except Exception as e:
        await bot.send_message(user_id, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å"
@router.callback_query(F.data == "edit_day")
async def edit_day_handler(callback: types.CallbackQuery):
    print("‚ö†Ô∏è –°—Ä–∞–±–æ—Ç–∞–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ edit_day")
    await callback.answer()
    user_id = callback.from_user.id

    with db:
        user = User.get_or_none(user_id=user_id)

        if user is None:
            await callback.message.answer("‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.answer()
            return

        itinerary_entry = Route.select().where(Route.user == user).order_by(Route.created_at.desc()).first()

        if itinerary_entry is None:
            await callback.message.answer("üìå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤.")
            await callback.answer()
            return

        itinerary = itinerary_entry.itinerary  # ‚Üê –í–æ—Ç —Ç—É—Ç —è–≤–Ω–æ –ø–æ–ª—É—á–∞–µ–º itinerary –∏–∑ –±–∞–∑—ã

    await callback.message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å:", reply_markup=edit_day_keyboard(itinerary))
    await callback.answer()



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("edit_specific_day_"))
async def handle_specific_day_edit(callback: types.CallbackQuery, state: FSMContext):
    day_number = callback.data.split("_")[-1]
    user_id = callback.from_user.id

    db.connect()
    user = User.get_or_none(user_id=user_id)

    if user is None:
        await callback.answer("–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        db.close()
        return

    itinerary_entry = Route.select().where(Route.user == user).order_by(Route.created_at.desc()).first()

    if itinerary_entry is None:
        await callback.answer("–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        db.close()
        return

    itinerary = itinerary_entry.itinerary
    db.close()

    await state.update_data(day_to_edit=day_number, itinerary=itinerary)
    await state.set_state(TripStates.editing_day)
    await callback.message.answer(f"‚úèÔ∏è –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≤ –î–Ω–µ {day_number}?")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–Ω—è (–ø–æ–ª—É—á–∞–µ–º –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å)
@router.message(TripStates.editing_day)
async def process_edit_day(message: types.Message, state: FSMContext):
    user_input = message.text
    data = await state.get_data()
    day_to_edit = data['day_to_edit']
    user_id = message.from_user.id

    db.connect()
    user = User.get_or_none(user_id=user_id)

    if user is None:
        await message.answer("‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        db.close()
        await state.clear()
        return

    itinerary_entry = Route.select().where(Route.user == user).order_by(Route.created_at.desc()).first()

    if itinerary_entry is None:
        await message.answer("‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        db.close()
        await state.clear()
        return

    current_itinerary = itinerary_entry.itinerary

    await message.answer(f"‚è≥ –ú–µ–Ω—è—é –î–µ–Ω—å {day_to_edit} ‚Äî —ç—Ç–æ –∑–∞–π–º—ë—Ç –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã‚Ä¶")

    try:
        new_itinerary = await edit_day(current_itinerary, day_to_edit, user_input)

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –≤ –±–∞–∑–µ
        itinerary_entry.itinerary = new_itinerary
        itinerary_entry.save()

        db.close()

        messages = split_message(new_itinerary)

        for part in messages[:-1]:
            await message.answer(part, parse_mode="Markdown")

        await message.answer(messages[-1], reply_markup=itinerary_keyboard(), parse_mode="Markdown")

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–Ω—è: {e}")
        db.close()

    await state.clear()



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ /cancel –∏–ª–∏ —Å–±—Ä–æ—Å–∞
@router.message(Command("cancel"))
async def cancel_handler(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üîÑ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏ /start.")

@router.message(Command("my_routes"))
async def show_saved_routes(message: types.Message):
    user_id = message.from_user.id

    db.connect()
    user = User.get_or_none(user_id=user_id)

    if user is None:
        await message.answer("üìå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤.")
        db.close()
        return

    routes = Route.select().where(Route.user == user).order_by(Route.created_at.desc())

    if not routes.exists():
        await message.answer("üìå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤.")
        db.close()
        return

    buttons = [
        [InlineKeyboardButton(text=route.name, callback_data=f"show_route_{route.id}")]
        for route in routes
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer("üìå –¢–≤–æ–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:", reply_markup=keyboard)
    db.close()



@router.callback_query(F.data.startswith("show_route_"))
async def handle_show_route(callback: types.CallbackQuery):
    route_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id

    db.connect()
    route = Route.get_or_none(Route.id == route_id, Route.user.user_id == user_id)

    if route is None:
        await callback.answer("‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        db.close()
        return

    itinerary = route.itinerary
    db.close()

    messages = split_message(itinerary)
    for part in messages[:-1]:
        await callback.message.answer(part, parse_mode="Markdown")

    await callback.message.answer(messages[-1], reply_markup=itinerary_keyboard(), parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "delete_route")
async def delete_route_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    with db:
        user = User.get_or_none(user_id=user_id)

        if user is None:
            await callback.message.answer("üìå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            await callback.answer()
            return

        routes = Route.select().where(Route.user == user).order_by(Route.created_at.desc())

        if not routes.exists():
            await callback.message.answer("üìå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            await callback.answer()
            return

        buttons = [
            [InlineKeyboardButton(text=f"üóëÔ∏è {route.name}", callback_data=f"delete_route_{route.id}")]
            for route in routes
        ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.answer("üóëÔ∏è –í—ã–±–µ—Ä–∏ –º–∞—Ä—à—Ä—É—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:", reply_markup=keyboard)
    await callback.answer()


@router.message(Command("delete_route"))
async def delete_route_command(message: types.Message):
    user_id = message.from_user.id

    db.connect()
    user = User.get_or_none(user_id=user_id)

    if user is None:
        await message.answer("üìå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        db.close()
        return

    routes = Route.select().where(Route.user == user).order_by(Route.created_at.desc())

    if not routes.exists():
        await message.answer("üìå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        db.close()
        return

    buttons = [
        [InlineKeyboardButton(text=f"üóëÔ∏è {route.name}", callback_data=f"delete_route_{route.id}")]
        for route in routes
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer("üóëÔ∏è –í—ã–±–µ—Ä–∏ –º–∞—Ä—à—Ä—É—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:", reply_markup=keyboard)
    db.close()


@router.callback_query(F.data == "export_pdf")
async def export_pdf_callback_handler(callback: types.CallbackQuery):
    print("‚ö†Ô∏è –°—Ä–∞–±–æ—Ç–∞–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ export_pdf")
    await callback.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF...")

    user_id = callback.from_user.id
    with db:
        user = User.get_or_none(user_id=user_id)

        if user is None:
            await callback.message.answer("‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        itinerary_entry = Route.select().where(Route.user == user).order_by(Route.created_at.desc()).first()

        if itinerary_entry is None:
            await callback.message.answer("‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        itinerary_text = itinerary_entry.itinerary

    pdf_filename = f"itinerary_{user_id}.pdf"
    itinerary_to_pdf(itinerary_text, pdf_filename)

    pdf_file = FSInputFile(pdf_filename)
    await callback.message.answer_document(pdf_file)
    os.remove(pdf_filename)


@router.callback_query(F.data.startswith("delete_route_"))
async def handle_delete_route(callback: types.CallbackQuery):
    print("‚ö†Ô∏è –°—Ä–∞–±–æ—Ç–∞–ª –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ delete_route")
    await callback.answer()
    route_id = int(callback.data.split("_")[-1])

    db.connect()
    route = Route.get_or_none(Route.id == route_id)

    if route is None:
        await callback.answer("‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        db.close()
        return

    route_name = route.name
    route.delete_instance()
    db.close()

    await callback.message.answer(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç ¬´{route_name}¬ª —É–¥–∞–ª—ë–Ω.")
    await callback.answer()
