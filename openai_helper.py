import openai
import re
import os

openai.api_key = os.getenv("OPENAI_API_KEY")

async def generate_itinerary(data):
    prompt = f"""
    –¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç—É—Ä–∏–∑–º—É –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥ –≤ –Ø–ø–æ–Ω–∏–∏, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ –¢–æ–∫–∏–æ.

    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –º–∞—Ä—à—Ä—É—Ç:

    1. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data['days']} –¥–Ω–µ–π.
    2. –°–æ—Å—Ç–∞–≤: {data['travelers']}.
    3. –ò–Ω—Ç–µ—Ä–µ—Å—ã: {data['interests']}.
    4. –¢–µ–º–ø: {data['pace']}.
    5. –ë—é–¥–∂–µ—Ç: {data['budget']}.
    6. –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –µ–¥–µ: {data['food']}.
    7. –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è: {data['special_requests']}.

    –°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –ø–æ –¥–Ω—è–º (–£—Ç—Ä–æ, –î–µ–Ω—å, –í–µ—á–µ—Ä). –ù–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
    """

    client = openai.OpenAI()
    response = client.chat.completions.create(
        model="gpt-4-1106-preview",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7,
        max_tokens=3000
    )

    itinerary = response.choices[0].message.content.strip()
    return add_google_maps_links(itinerary)


async def edit_day(current_itinerary, day_number, user_request):
    day_pattern = rf"(üìÖ?\s*–î–µ–Ω—å\s*{day_number}.*?)(?=(üìÖ?\s*–î–µ–Ω—å\s*\d+)|\Z)"
    match = re.search(day_pattern, current_itinerary, re.DOTALL)

    if not match:
        raise ValueError(f"–ù–µ –Ω–∞–π–¥–µ–Ω –î–µ–Ω—å {day_number}")

    day_text = match.group(1).strip()

    prompt = f"""
    –¢–µ–∫—É—â–∏–π –î–µ–Ω—å {day_number}:

    {day_text}

    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –¥–µ–Ω—å —Ç–∞–∫:
    "{user_request}"

    –ü–µ—Ä–µ—Å–æ–∑–¥–∞–π –î–µ–Ω—å {day_number}, —É—á—Ç—è –ø–æ–∂–µ–ª–∞–Ω–∏—è, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–£—Ç—Ä–æ, –î–µ–Ω—å, –í–µ—á–µ—Ä).
    """

    client = openai.OpenAI()
    response = client.chat.completions.create(
        model="gpt-4-1106-preview",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7,
        max_tokens=1500
    )

    edited_day_text = response.choices[0].message.content.strip()
    new_itinerary = current_itinerary.replace(day_text, edited_day_text)

    return new_itinerary


import re

def add_google_maps_links(itinerary_text):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
    def make_link(place):
        query = place.strip().replace(' ', '+')
        return f"<a href='https://www.google.com/maps/search/?api=1&query={query}'>{place}</a>"

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞—Ö–æ–¥—è—â–µ–µ –≤—Å–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç –≤ —Ç–µ–∫—Å—Ç–µ
    pattern = re.compile(r"([A-Z][A-Za-z0-9&'\-\s]{2,}(?:Cafe|Museum|Park|Station|City|Road|Bar|Restaurant|Market|Center|Shrine|Temple|Hall|Tower|Broadway|Garden|Ginza|Akihabara|Ikebukuro|Ueno|Nakano|Animate|Mandarake|Taito|Pok√©mon|Gundam|Sunshine)[A-Za-z0-9&'\-\s]*)")

    # –ó–∞–º–µ–Ω–∞ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—Ç –Ω–∞ —Å—Å—ã–ª–∫–∏
    def replace(match):
        place = match.group(1).strip()
        return make_link(place)

    return pattern.sub(replace, itinerary_text)



